// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/follower.proto

package follower

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Followers_GetUserFollowings_FullMethodName      = "/Followers/GetUserFollowings"
	Followers_GetUserFollowers_FullMethodName       = "/Followers/GetUserFollowers"
	Followers_GetUserRecommendations_FullMethodName = "/Followers/GetUserRecommendations"
	Followers_CreateNewFollowing_FullMethodName     = "/Followers/CreateNewFollowing"
	Followers_UnfollowUser_FullMethodName           = "/Followers/UnfollowUser"
)

// FollowersClient is the client API for Followers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowersClient interface {
	GetUserFollowings(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListFollowingResponse, error)
	GetUserFollowers(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListFollowingResponse, error)
	GetUserRecommendations(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListFollowingResponse, error)
	CreateNewFollowing(ctx context.Context, in *FollowingCreateRequest, opts ...grpc.CallOption) (*FollowerResponse, error)
	UnfollowUser(ctx context.Context, in *UserUnfollowRequest, opts ...grpc.CallOption) (*FollowerResponse, error)
}

type followersClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowersClient(cc grpc.ClientConnInterface) FollowersClient {
	return &followersClient{cc}
}

func (c *followersClient) GetUserFollowings(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListFollowingResponse, error) {
	out := new(ListFollowingResponse)
	err := c.cc.Invoke(ctx, Followers_GetUserFollowings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersClient) GetUserFollowers(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListFollowingResponse, error) {
	out := new(ListFollowingResponse)
	err := c.cc.Invoke(ctx, Followers_GetUserFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersClient) GetUserRecommendations(ctx context.Context, in *Identificator, opts ...grpc.CallOption) (*ListFollowingResponse, error) {
	out := new(ListFollowingResponse)
	err := c.cc.Invoke(ctx, Followers_GetUserRecommendations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersClient) CreateNewFollowing(ctx context.Context, in *FollowingCreateRequest, opts ...grpc.CallOption) (*FollowerResponse, error) {
	out := new(FollowerResponse)
	err := c.cc.Invoke(ctx, Followers_CreateNewFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersClient) UnfollowUser(ctx context.Context, in *UserUnfollowRequest, opts ...grpc.CallOption) (*FollowerResponse, error) {
	out := new(FollowerResponse)
	err := c.cc.Invoke(ctx, Followers_UnfollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowersServer is the server API for Followers service.
// All implementations must embed UnimplementedFollowersServer
// for forward compatibility
type FollowersServer interface {
	GetUserFollowings(context.Context, *Identificator) (*ListFollowingResponse, error)
	GetUserFollowers(context.Context, *Identificator) (*ListFollowingResponse, error)
	GetUserRecommendations(context.Context, *Identificator) (*ListFollowingResponse, error)
	CreateNewFollowing(context.Context, *FollowingCreateRequest) (*FollowerResponse, error)
	UnfollowUser(context.Context, *UserUnfollowRequest) (*FollowerResponse, error)
	mustEmbedUnimplementedFollowersServer()
}

// UnimplementedFollowersServer must be embedded to have forward compatible implementations.
type UnimplementedFollowersServer struct {
}

func (UnimplementedFollowersServer) GetUserFollowings(context.Context, *Identificator) (*ListFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowings not implemented")
}
func (UnimplementedFollowersServer) GetUserFollowers(context.Context, *Identificator) (*ListFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowers not implemented")
}
func (UnimplementedFollowersServer) GetUserRecommendations(context.Context, *Identificator) (*ListFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecommendations not implemented")
}
func (UnimplementedFollowersServer) CreateNewFollowing(context.Context, *FollowingCreateRequest) (*FollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewFollowing not implemented")
}
func (UnimplementedFollowersServer) UnfollowUser(context.Context, *UserUnfollowRequest) (*FollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedFollowersServer) mustEmbedUnimplementedFollowersServer() {}

// UnsafeFollowersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowersServer will
// result in compilation errors.
type UnsafeFollowersServer interface {
	mustEmbedUnimplementedFollowersServer()
}

func RegisterFollowersServer(s grpc.ServiceRegistrar, srv FollowersServer) {
	s.RegisterService(&Followers_ServiceDesc, srv)
}

func _Followers_GetUserFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServer).GetUserFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Followers_GetUserFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServer).GetUserFollowings(ctx, req.(*Identificator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Followers_GetUserFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServer).GetUserFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Followers_GetUserFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServer).GetUserFollowers(ctx, req.(*Identificator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Followers_GetUserRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServer).GetUserRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Followers_GetUserRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServer).GetUserRecommendations(ctx, req.(*Identificator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Followers_CreateNewFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServer).CreateNewFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Followers_CreateNewFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServer).CreateNewFollowing(ctx, req.(*FollowingCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Followers_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUnfollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Followers_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServer).UnfollowUser(ctx, req.(*UserUnfollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Followers_ServiceDesc is the grpc.ServiceDesc for Followers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Followers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Followers",
	HandlerType: (*FollowersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserFollowings",
			Handler:    _Followers_GetUserFollowings_Handler,
		},
		{
			MethodName: "GetUserFollowers",
			Handler:    _Followers_GetUserFollowers_Handler,
		},
		{
			MethodName: "GetUserRecommendations",
			Handler:    _Followers_GetUserRecommendations_Handler,
		},
		{
			MethodName: "CreateNewFollowing",
			Handler:    _Followers_CreateNewFollowing_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _Followers_UnfollowUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/follower.proto",
}
